#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <string>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class Logger
{
    public:
        enum class ELogLevel : uint8_t
        {
            eNone,
            eError,
            eWarning,
            eInfo,
            eDebug,
            eVerbose
        };

        static Logger * GetInstance (void) { return NULL; }

        template <class DERIVED_TYPE, typename... ARGS>
        constexpr void Log (const ELogLevel  v_eLogLevel,
                            std::string_view v_module,
                            std::string_view v_msg,
                            ARGS &&...       v_args)
        {
            static_cast <DERIVED_TYPE &>(* this).Log (v_eLogLevel, v_module, v_msg, v_args...);
        }
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
